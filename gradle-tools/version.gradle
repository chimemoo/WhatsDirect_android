/*
 * Copyright 2018 Rizky Kharisma (@ngengs)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

// Versioning file definition
def versionProperties
def versionPropertiesFile = rootProject.file("app/properties/version.properties")
if (versionPropertiesFile.exists()) {
    versionProperties = new Properties()
    versionProperties.load(new FileInputStream(versionPropertiesFile))
} else {
    throw new RuntimeException('Version properties file not Found, create /app/properties/version.properties')
}

class AppVersion {
    private int major
    private int minor
    private int patch
    private int build
    private String copyRight
    private def file

    AppVersion(properties, copyRight, file) {
        major = properties['VERSION_MAJOR'] as int
        minor = properties['VERSION_MINOR'] as int
        patch = properties['VERSION_PATCH'] as int
        build = properties['VERSION_BUILD'] as int
        this.copyRight = copyRight
        this.file = file
    }

    int getMajor() {
        return major
    }

    int getMinor() {
        return minor
    }

    int getPatch() {
        return patch
    }

    int getBuild() {
        return build
    }

    def versionCode() {
        return (major * 10000000) + (minor * 100000) + (patch * 100) + build
    }

    String versionName() {
        return "${major}.${minor}.${patch}"
    }

    def bumpMajor() {
        major = major + 1
        minor = 0
        patch = 0
        build = build + 1
    }

    def bumpMinor() {
        minor = minor + 1
        patch = 0
        build = build + 1
    }

    def bumpPatch() {
        patch = patch + 1
        build = build + 1
    }

    def saveVersion() {
        println "Updating data..."
        file.text = """${copyRight}
# Use gradle task instead touch this file
#
# Available command:
# updateMajor
# updateMinor
# updatePatch
#
# Version order in application will be MAJOR.MINOR.PATCH and BUILD is for counter only
# Update time: ${new Date()}
VERSION_MAJOR=${major}
VERSION_MINOR=${minor}
VERSION_PATCH=${patch}
VERSION_BUILD=${build}
"""
    }
}

def appVersion = new AppVersion(versionProperties, rootProject.ext.copyrightHeader, rootProject.file("app/properties/version.properties"))

def passVersionToRootProject(AppVersion version) {
    rootProject.ext.versionMajor = version.getMajor()
    rootProject.ext.versionMinor = version.getMinor()
    rootProject.ext.versionPatch = version.getPatch()
    rootProject.ext.versionBuild = version.getBuild()
    rootProject.ext.versionCode = version.versionCode()
    rootProject.ext.versionName = version.versionName()
}

passVersionToRootProject(appVersion)

task updateMajor {
    doLast {
        println "Bump Major version..."
        println "Preparing data..."
        println "From:\t${appVersion.getMajor()}"
        appVersion.bumpMajor()
        println "To:\t${appVersion.getMajor()}"
        println "Version target:\t${appVersion.versionName()}"
        passVersionToRootProject(appVersion)
        appVersion.saveVersion()
    }
}

task updateMinor {
    doLast {
        println "Bump Minor version..."
        println "Preparing data..."
        println "From:\t${appVersion.getMinor()}"
        appVersion.bumpMinor()
        println "To:\t${appVersion.getMinor()}"
        println "Version target:\t${appVersion.versionName()}"
        passVersionToRootProject(appVersion)
        appVersion.saveVersion()
    }
}

task updatePatch {
    doLast {
        println "Bump Patch version..."
        println "Preparing data..."
        println "From:\t${appVersion.getPatch()}"
        appVersion.bumpPatch()
        println "To:\t${appVersion.getPatch()}"
        println "Version target:\t${appVersion.versionName()}"
        passVersionToRootProject(appVersion)
        appVersion.saveVersion()
    }
}

task checkVersionCode {
    doLast {
        println appVersion.versionCode()
    }
}

task checkVersionName {
    doLast {
        println appVersion.versionName()
    }
}